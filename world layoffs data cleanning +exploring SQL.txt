-- i use data downloaded by the link down below. The data cleaning process involves handling missing values, removing duplicates, correcting data types, detecting outliers, and standardizing data
-- Additionaly, I did an EDA  to show some insights about layoffs per years, country, company and found worst economy year 


--https://www.kaggle.com/datasets/swaptr/layoffs-2022

-- remove duplicates 


WITH duplicates_cte AS 
(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, location, total_laid_off, percentage_laid_off, industry, 'date', stage, country, funds_raised) AS row_num 
FROM layoffs_staging
)
SELECT * 
FROM duplicates_cte 
WHERE row_num > 1; 

INSERT INTO layoffs_staging2 
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, location, total_laid_off, percentage_laid_off, industry, 'date', stage, country, funds_raised) AS row_num 
FROM layoffs_staging;

DELETE 
FROM layoffs_staging2
WHERE row_num > 1;

SELECT *
FROM layoffs_staging2;

-- standardising data 

UPDATE layoffs_staging2
SET company = TRIM(company);


SELECT *
FROM layoffs_staging2
WHERE company = 'conclavio'; 

-- i incert new company with issues on industry and country to do standardise due to our data downloaded standardised

 
INSERT INTO layoffs_staging2
VALUES('conclavio','California','cryprocurrency','230','0.08','2023-01-01','Uknown','Unitedd States','1000','1'); 

SELECT DISTINCT industry 
FROM layoffs_staging2 
ORDER BY 1;

SELECT * 
FROM layoffs_staging2
WHERE industry like '%ryp%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'crypr%';

UPDATE layoffs_staging2
SET country = 'United States'
WHERE country LIKE 'Unitedd%';

SELECT DISTINCT country 
FROM layoffs_staging2
ORDER BY 1;


SELECT DISTINCT location
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET location = 'Fjord'
WHERE country LIKE 'FΓΈrde';

SELECT DISTINCT date
FROM layoffs_staging2
ORDER BY 1;


ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- remove blank spaces or null values

SELECT *
FROM layoffs_staging2
WHERE company = 'Appsmith';

UPDATE layoffs_staging2
SET industry = 'Travel'
WHERE industry LIKE '';

-- remove any columns or rows 


ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

SELECT *
FROM layoffs_staging2

-- exploratory data analysis 

SELECT *
FROM layoffs_staging2
WHERE percentage_laid_off = 1
ORDER BY funds_raised DESC;

-- companies that fired most people 

SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
ORDER BY 2 DESC ;

-- see the time space that our data is 


SELECT MIN(`date`), MAX(`date`)
FROM layoffs_staging2;

-- idustry that lost more employyes 

SELECT industry, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY industry
ORDER BY 2 DESC ;

-- country with most laid offs 


SELECT country, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY country 
ORDER BY 2 DESC ;

-- found the worst year for employees  


SELECT YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY YEAR(`date`) 
ORDER BY 2 DESC ;


SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off) 
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL 
GROUP BY `MONTH`
ORDER BY 1 ASC; 

-- progression of laid off by month 


WITH rolling_total AS 
(
SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off) 
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL 
GROUP BY `MONTH`
ORDER BY 1 ASC
)
SELECT `MONTH`, 
SUM(total_laid_off),
SUM(total_laid_off) OVER(ORDER BY `MONTH`) AS rolling_total 
FROM rolling_total;

-- rank year with most laid offs


SELECT company, YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company, YEAR(`date`)
ORDER BY 3 DESC 
